//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace PikoTrafficManager.DataPikoClient {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SupportData", Namespace="http://developer.piko.com/PikoDataService/Data/")]
    [System.SerializableAttribute()]
    public partial class SupportData : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ulong DurationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int EomField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ExtensionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FileNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long FileSizeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private PikoTrafficManager.DataPikoClient.FrameRate FrameRateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FullPathField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int HeightField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdCategoryField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsExistField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ulong TcStartField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private PikoTrafficManager.DataPikoClient.TemplateFieldValueData[] TemplateFieldsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TitleField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UIdSupportField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int WidthField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ulong Duration {
            get {
                return this.DurationField;
            }
            set {
                if ((this.DurationField.Equals(value) != true)) {
                    this.DurationField = value;
                    this.RaisePropertyChanged("Duration");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Eom {
            get {
                return this.EomField;
            }
            set {
                if ((this.EomField.Equals(value) != true)) {
                    this.EomField = value;
                    this.RaisePropertyChanged("Eom");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Extension {
            get {
                return this.ExtensionField;
            }
            set {
                if ((object.ReferenceEquals(this.ExtensionField, value) != true)) {
                    this.ExtensionField = value;
                    this.RaisePropertyChanged("Extension");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FileName {
            get {
                return this.FileNameField;
            }
            set {
                if ((object.ReferenceEquals(this.FileNameField, value) != true)) {
                    this.FileNameField = value;
                    this.RaisePropertyChanged("FileName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long FileSize {
            get {
                return this.FileSizeField;
            }
            set {
                if ((this.FileSizeField.Equals(value) != true)) {
                    this.FileSizeField = value;
                    this.RaisePropertyChanged("FileSize");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public PikoTrafficManager.DataPikoClient.FrameRate FrameRate {
            get {
                return this.FrameRateField;
            }
            set {
                if ((this.FrameRateField.Equals(value) != true)) {
                    this.FrameRateField = value;
                    this.RaisePropertyChanged("FrameRate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FullPath {
            get {
                return this.FullPathField;
            }
            set {
                if ((object.ReferenceEquals(this.FullPathField, value) != true)) {
                    this.FullPathField = value;
                    this.RaisePropertyChanged("FullPath");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Height {
            get {
                return this.HeightField;
            }
            set {
                if ((this.HeightField.Equals(value) != true)) {
                    this.HeightField = value;
                    this.RaisePropertyChanged("Height");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int IdCategory {
            get {
                return this.IdCategoryField;
            }
            set {
                if ((this.IdCategoryField.Equals(value) != true)) {
                    this.IdCategoryField = value;
                    this.RaisePropertyChanged("IdCategory");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsExist {
            get {
                return this.IsExistField;
            }
            set {
                if ((this.IsExistField.Equals(value) != true)) {
                    this.IsExistField = value;
                    this.RaisePropertyChanged("IsExist");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ulong TcStart {
            get {
                return this.TcStartField;
            }
            set {
                if ((this.TcStartField.Equals(value) != true)) {
                    this.TcStartField = value;
                    this.RaisePropertyChanged("TcStart");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public PikoTrafficManager.DataPikoClient.TemplateFieldValueData[] TemplateFields {
            get {
                return this.TemplateFieldsField;
            }
            set {
                if ((object.ReferenceEquals(this.TemplateFieldsField, value) != true)) {
                    this.TemplateFieldsField = value;
                    this.RaisePropertyChanged("TemplateFields");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Title {
            get {
                return this.TitleField;
            }
            set {
                if ((object.ReferenceEquals(this.TitleField, value) != true)) {
                    this.TitleField = value;
                    this.RaisePropertyChanged("Title");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UIdSupport {
            get {
                return this.UIdSupportField;
            }
            set {
                if ((object.ReferenceEquals(this.UIdSupportField, value) != true)) {
                    this.UIdSupportField = value;
                    this.RaisePropertyChanged("UIdSupport");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Width {
            get {
                return this.WidthField;
            }
            set {
                if ((this.WidthField.Equals(value) != true)) {
                    this.WidthField = value;
                    this.RaisePropertyChanged("Width");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="FrameRate", Namespace="http://developer.piko.com/PikoDataService/Data/")]
    public enum FrameRate : uint {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        PAL = 25000,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        NTSC = 30000,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        NTSC_DROP = 30001,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TemplateFieldValueData", Namespace="http://developer.piko.com/PikoDataService/Data/")]
    [System.SerializableAttribute()]
    public partial class TemplateFieldValueData : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private PikoTrafficManager.DataPikoClient.TemplateFieldData FieldDefinitionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdValueField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ValueField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public PikoTrafficManager.DataPikoClient.TemplateFieldData FieldDefinition {
            get {
                return this.FieldDefinitionField;
            }
            set {
                if ((object.ReferenceEquals(this.FieldDefinitionField, value) != true)) {
                    this.FieldDefinitionField = value;
                    this.RaisePropertyChanged("FieldDefinition");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int IdValue {
            get {
                return this.IdValueField;
            }
            set {
                if ((this.IdValueField.Equals(value) != true)) {
                    this.IdValueField = value;
                    this.RaisePropertyChanged("IdValue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Value {
            get {
                return this.ValueField;
            }
            set {
                if ((object.ReferenceEquals(this.ValueField, value) != true)) {
                    this.ValueField = value;
                    this.RaisePropertyChanged("Value");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TemplateFieldData", Namespace="http://developer.piko.com/PikoDataService/Data/")]
    [System.SerializableAttribute()]
    public partial class TemplateFieldData : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FieldNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private PikoTrafficManager.DataPikoClient.TemplateFieldType FieldTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdFieldCategoryField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FieldName {
            get {
                return this.FieldNameField;
            }
            set {
                if ((object.ReferenceEquals(this.FieldNameField, value) != true)) {
                    this.FieldNameField = value;
                    this.RaisePropertyChanged("FieldName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public PikoTrafficManager.DataPikoClient.TemplateFieldType FieldType {
            get {
                return this.FieldTypeField;
            }
            set {
                if ((this.FieldTypeField.Equals(value) != true)) {
                    this.FieldTypeField = value;
                    this.RaisePropertyChanged("FieldType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int IdFieldCategory {
            get {
                return this.IdFieldCategoryField;
            }
            set {
                if ((this.IdFieldCategoryField.Equals(value) != true)) {
                    this.IdFieldCategoryField = value;
                    this.RaisePropertyChanged("IdFieldCategory");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TemplateFieldType", Namespace="http://developer.piko.com/PikoDataService/Data/")]
    public enum TemplateFieldType : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Text = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Picture = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Video = 2,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MediaInfoScanType", Namespace="http://schemas.datacontract.org/2004/07/Piko.Media.Info.Tool")]
    public enum MediaInfoScanType : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Lite = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Full = 1,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Segment", Namespace="http://schemas.datacontract.org/2004/07/PikoDataService.DB")]
    [System.SerializableAttribute()]
    public partial class Segment : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ulong DurationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ulong EomField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private uint SegmentIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ulong SomField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SupportIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ulong Duration {
            get {
                return this.DurationField;
            }
            set {
                if ((this.DurationField.Equals(value) != true)) {
                    this.DurationField = value;
                    this.RaisePropertyChanged("Duration");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ulong Eom {
            get {
                return this.EomField;
            }
            set {
                if ((this.EomField.Equals(value) != true)) {
                    this.EomField = value;
                    this.RaisePropertyChanged("Eom");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public uint SegmentId {
            get {
                return this.SegmentIdField;
            }
            set {
                if ((this.SegmentIdField.Equals(value) != true)) {
                    this.SegmentIdField = value;
                    this.RaisePropertyChanged("SegmentId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ulong Som {
            get {
                return this.SomField;
            }
            set {
                if ((this.SomField.Equals(value) != true)) {
                    this.SomField = value;
                    this.RaisePropertyChanged("Som");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SupportId {
            get {
                return this.SupportIdField;
            }
            set {
                if ((object.ReferenceEquals(this.SupportIdField, value) != true)) {
                    this.SupportIdField = value;
                    this.RaisePropertyChanged("SupportId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Channel", Namespace="http://schemas.datacontract.org/2004/07/PikoDataService.DB")]
    [System.SerializableAttribute()]
    public partial class Channel : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ChannelNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime LastHasRunDateField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ChannelName {
            get {
                return this.ChannelNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ChannelNameField, value) != true)) {
                    this.ChannelNameField = value;
                    this.RaisePropertyChanged("ChannelName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime LastHasRunDate {
            get {
                return this.LastHasRunDateField;
            }
            set {
                if ((this.LastHasRunDateField.Equals(value) != true)) {
                    this.LastHasRunDateField = value;
                    this.RaisePropertyChanged("LastHasRunDate");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Devices", Namespace="http://schemas.datacontract.org/2004/07/PikoDataService.DB")]
    [System.SerializableAttribute()]
    public partial class Devices : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DeviceField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private uint DeviceTypeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Device {
            get {
                return this.DeviceField;
            }
            set {
                if ((object.ReferenceEquals(this.DeviceField, value) != true)) {
                    this.DeviceField = value;
                    this.RaisePropertyChanged("Device");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public uint DeviceType {
            get {
                return this.DeviceTypeField;
            }
            set {
                if ((this.DeviceTypeField.Equals(value) != true)) {
                    this.DeviceTypeField = value;
                    this.RaisePropertyChanged("DeviceType");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PlaylistData", Namespace="http://developer.piko.com/PikoDataService/Data/")]
    [System.SerializableAttribute()]
    public partial class PlaylistData : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CommentField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private PikoTrafficManager.DataPikoClient.PlaylistElementData[] ElementsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PlaylistFileNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PlaylistPathField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PlaylistTitleField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private PikoTrafficManager.DataPikoClient.PlayListType PlaylistTypeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Comment {
            get {
                return this.CommentField;
            }
            set {
                if ((object.ReferenceEquals(this.CommentField, value) != true)) {
                    this.CommentField = value;
                    this.RaisePropertyChanged("Comment");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public PikoTrafficManager.DataPikoClient.PlaylistElementData[] Elements {
            get {
                return this.ElementsField;
            }
            set {
                if ((object.ReferenceEquals(this.ElementsField, value) != true)) {
                    this.ElementsField = value;
                    this.RaisePropertyChanged("Elements");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PlaylistFileName {
            get {
                return this.PlaylistFileNameField;
            }
            set {
                if ((object.ReferenceEquals(this.PlaylistFileNameField, value) != true)) {
                    this.PlaylistFileNameField = value;
                    this.RaisePropertyChanged("PlaylistFileName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PlaylistPath {
            get {
                return this.PlaylistPathField;
            }
            set {
                if ((object.ReferenceEquals(this.PlaylistPathField, value) != true)) {
                    this.PlaylistPathField = value;
                    this.RaisePropertyChanged("PlaylistPath");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PlaylistTitle {
            get {
                return this.PlaylistTitleField;
            }
            set {
                if ((object.ReferenceEquals(this.PlaylistTitleField, value) != true)) {
                    this.PlaylistTitleField = value;
                    this.RaisePropertyChanged("PlaylistTitle");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public PikoTrafficManager.DataPikoClient.PlayListType PlaylistType {
            get {
                return this.PlaylistTypeField;
            }
            set {
                if ((this.PlaylistTypeField.Equals(value) != true)) {
                    this.PlaylistTypeField = value;
                    this.RaisePropertyChanged("PlaylistType");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PlaylistElementData", Namespace="http://developer.piko.com/PikoDataService/Data/")]
    [System.SerializableAttribute()]
    public partial class PlaylistElementData : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ulong DurationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private PikoTrafficManager.DataPikoClient.ElementType ElementTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FileNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private PikoTrafficManager.DataPikoClient.FrameRate FrameRateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool RepeatField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private PikoTrafficManager.DataPikoClient.PlaylistElementSecondaryEventData[] SecondaryEventsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private PikoTrafficManager.DataPikoClient.StartMode StartModeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private PikoTrafficManager.DataPikoClient.SupportData SupportField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private uint TCInField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TitleField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UidField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ulong Duration {
            get {
                return this.DurationField;
            }
            set {
                if ((this.DurationField.Equals(value) != true)) {
                    this.DurationField = value;
                    this.RaisePropertyChanged("Duration");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public PikoTrafficManager.DataPikoClient.ElementType ElementType {
            get {
                return this.ElementTypeField;
            }
            set {
                if ((this.ElementTypeField.Equals(value) != true)) {
                    this.ElementTypeField = value;
                    this.RaisePropertyChanged("ElementType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FileName {
            get {
                return this.FileNameField;
            }
            set {
                if ((object.ReferenceEquals(this.FileNameField, value) != true)) {
                    this.FileNameField = value;
                    this.RaisePropertyChanged("FileName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public PikoTrafficManager.DataPikoClient.FrameRate FrameRate {
            get {
                return this.FrameRateField;
            }
            set {
                if ((this.FrameRateField.Equals(value) != true)) {
                    this.FrameRateField = value;
                    this.RaisePropertyChanged("FrameRate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Repeat {
            get {
                return this.RepeatField;
            }
            set {
                if ((this.RepeatField.Equals(value) != true)) {
                    this.RepeatField = value;
                    this.RaisePropertyChanged("Repeat");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public PikoTrafficManager.DataPikoClient.PlaylistElementSecondaryEventData[] SecondaryEvents {
            get {
                return this.SecondaryEventsField;
            }
            set {
                if ((object.ReferenceEquals(this.SecondaryEventsField, value) != true)) {
                    this.SecondaryEventsField = value;
                    this.RaisePropertyChanged("SecondaryEvents");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public PikoTrafficManager.DataPikoClient.StartMode StartMode {
            get {
                return this.StartModeField;
            }
            set {
                if ((this.StartModeField.Equals(value) != true)) {
                    this.StartModeField = value;
                    this.RaisePropertyChanged("StartMode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public PikoTrafficManager.DataPikoClient.SupportData Support {
            get {
                return this.SupportField;
            }
            set {
                if ((object.ReferenceEquals(this.SupportField, value) != true)) {
                    this.SupportField = value;
                    this.RaisePropertyChanged("Support");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public uint TCIn {
            get {
                return this.TCInField;
            }
            set {
                if ((this.TCInField.Equals(value) != true)) {
                    this.TCInField = value;
                    this.RaisePropertyChanged("TCIn");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Title {
            get {
                return this.TitleField;
            }
            set {
                if ((object.ReferenceEquals(this.TitleField, value) != true)) {
                    this.TitleField = value;
                    this.RaisePropertyChanged("Title");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Uid {
            get {
                return this.UidField;
            }
            set {
                if ((object.ReferenceEquals(this.UidField, value) != true)) {
                    this.UidField = value;
                    this.RaisePropertyChanged("Uid");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PlayListType", Namespace="http://developer.piko.com/PikoDataService/Data/")]
    public enum PlayListType : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Classic = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Block = 2,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ElementType", Namespace="http://schemas.datacontract.org/2004/07/PikoTrafficManager.Data")]
    public enum ElementType : uint {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Support = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Break = 1,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PlaylistElementSecondaryEventData", Namespace="http://developer.piko.com/PikoDataService/Data/")]
    [System.SerializableAttribute()]
    public partial class PlaylistElementSecondaryEventData : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ulong DurationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ExtendedParamField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ParamField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SecondaryEventTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private uint TcOffsetTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private uint TcStartOffsetField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private PikoTrafficManager.DataPikoClient.TemplateFieldValueData[] TemplateFieldsField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ulong Duration {
            get {
                return this.DurationField;
            }
            set {
                if ((this.DurationField.Equals(value) != true)) {
                    this.DurationField = value;
                    this.RaisePropertyChanged("Duration");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ExtendedParam {
            get {
                return this.ExtendedParamField;
            }
            set {
                if ((object.ReferenceEquals(this.ExtendedParamField, value) != true)) {
                    this.ExtendedParamField = value;
                    this.RaisePropertyChanged("ExtendedParam");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Param {
            get {
                return this.ParamField;
            }
            set {
                if ((object.ReferenceEquals(this.ParamField, value) != true)) {
                    this.ParamField = value;
                    this.RaisePropertyChanged("Param");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SecondaryEventType {
            get {
                return this.SecondaryEventTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.SecondaryEventTypeField, value) != true)) {
                    this.SecondaryEventTypeField = value;
                    this.RaisePropertyChanged("SecondaryEventType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public uint TcOffsetType {
            get {
                return this.TcOffsetTypeField;
            }
            set {
                if ((this.TcOffsetTypeField.Equals(value) != true)) {
                    this.TcOffsetTypeField = value;
                    this.RaisePropertyChanged("TcOffsetType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public uint TcStartOffset {
            get {
                return this.TcStartOffsetField;
            }
            set {
                if ((this.TcStartOffsetField.Equals(value) != true)) {
                    this.TcStartOffsetField = value;
                    this.RaisePropertyChanged("TcStartOffset");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public PikoTrafficManager.DataPikoClient.TemplateFieldValueData[] TemplateFields {
            get {
                return this.TemplateFieldsField;
            }
            set {
                if ((object.ReferenceEquals(this.TemplateFieldsField, value) != true)) {
                    this.TemplateFieldsField = value;
                    this.RaisePropertyChanged("TemplateFields");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="StartMode", Namespace="http://developer.piko.com/PikoDataService/Data/")]
    public enum StartMode : uint {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Auto = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        FixedTime = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Manual = 2,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Config", Namespace="http://schemas.datacontract.org/2004/07/PikoDataService.DB")]
    [System.SerializableAttribute()]
    public partial class Config : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string HasRunsIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SupportsIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ulong VersionField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string HasRunsId {
            get {
                return this.HasRunsIdField;
            }
            set {
                if ((object.ReferenceEquals(this.HasRunsIdField, value) != true)) {
                    this.HasRunsIdField = value;
                    this.RaisePropertyChanged("HasRunsId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SupportsId {
            get {
                return this.SupportsIdField;
            }
            set {
                if ((object.ReferenceEquals(this.SupportsIdField, value) != true)) {
                    this.SupportsIdField = value;
                    this.RaisePropertyChanged("SupportsId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ulong Version {
            get {
                return this.VersionField;
            }
            set {
                if ((this.VersionField.Equals(value) != true)) {
                    this.VersionField = value;
                    this.RaisePropertyChanged("Version");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="VolumeData", Namespace="http://developer.piko.com/PikoDataService/Data/")]
    [System.SerializableAttribute()]
    public partial class VolumeData : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PathField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private PikoTrafficManager.DataPikoClient.SupportData[] SupportsDataField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Path {
            get {
                return this.PathField;
            }
            set {
                if ((object.ReferenceEquals(this.PathField, value) != true)) {
                    this.PathField = value;
                    this.RaisePropertyChanged("Path");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public PikoTrafficManager.DataPikoClient.SupportData[] SupportsData {
            get {
                return this.SupportsDataField;
            }
            set {
                if ((object.ReferenceEquals(this.SupportsDataField, value) != true)) {
                    this.SupportsDataField = value;
                    this.RaisePropertyChanged("SupportsData");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Category", Namespace="http://developer.piko.com/PikoDataService/Data/")]
    [System.SerializableAttribute()]
    public partial class Category : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private PikoTrafficManager.DataPikoClient.TemplateFieldData[] TemplateFieldsField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public PikoTrafficManager.DataPikoClient.TemplateFieldData[] TemplateFields {
            get {
                return this.TemplateFieldsField;
            }
            set {
                if ((object.ReferenceEquals(this.TemplateFieldsField, value) != true)) {
                    this.TemplateFieldsField = value;
                    this.RaisePropertyChanged("TemplateFields");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://developer.piko.com/PikoDataServices/", ConfigurationName="DataPikoClient.ServiceDataPiko")]
    public interface ServiceDataPiko {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://developer.piko.com/PikoDataServices/ServiceDataPiko/GetVideoInfo", ReplyAction="http://developer.piko.com/PikoDataServices/ServiceDataPiko/GetVideoInfoResponse")]
        PikoTrafficManager.DataPikoClient.SupportData GetVideoInfo(string IdVideo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://developer.piko.com/PikoDataServices/ServiceDataPiko/GetVideoInfo", ReplyAction="http://developer.piko.com/PikoDataServices/ServiceDataPiko/GetVideoInfoResponse")]
        System.Threading.Tasks.Task<PikoTrafficManager.DataPikoClient.SupportData> GetVideoInfoAsync(string IdVideo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://developer.piko.com/PikoDataServices/ServiceDataPiko/GetMediaInfo", ReplyAction="http://developer.piko.com/PikoDataServices/ServiceDataPiko/GetMediaInfoResponse")]
        string GetMediaInfo(string VideoPath, PikoTrafficManager.DataPikoClient.MediaInfoScanType ScanType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://developer.piko.com/PikoDataServices/ServiceDataPiko/GetMediaInfo", ReplyAction="http://developer.piko.com/PikoDataServices/ServiceDataPiko/GetMediaInfoResponse")]
        System.Threading.Tasks.Task<string> GetMediaInfoAsync(string VideoPath, PikoTrafficManager.DataPikoClient.MediaInfoScanType ScanType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://developer.piko.com/PikoDataServices/ServiceDataPiko/GetVideoSegmentInfo", ReplyAction="http://developer.piko.com/PikoDataServices/ServiceDataPiko/GetVideoSegmentInfoRes" +
            "ponse")]
        PikoTrafficManager.DataPikoClient.Segment GetVideoSegmentInfo(string IdVideo, uint SegmentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://developer.piko.com/PikoDataServices/ServiceDataPiko/GetVideoSegmentInfo", ReplyAction="http://developer.piko.com/PikoDataServices/ServiceDataPiko/GetVideoSegmentInfoRes" +
            "ponse")]
        System.Threading.Tasks.Task<PikoTrafficManager.DataPikoClient.Segment> GetVideoSegmentInfoAsync(string IdVideo, uint SegmentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://developer.piko.com/PikoDataServices/ServiceDataPiko/GetVideoSegmentList", ReplyAction="http://developer.piko.com/PikoDataServices/ServiceDataPiko/GetVideoSegmentListRes" +
            "ponse")]
        PikoTrafficManager.DataPikoClient.Segment[] GetVideoSegmentList(string IdVideo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://developer.piko.com/PikoDataServices/ServiceDataPiko/GetVideoSegmentList", ReplyAction="http://developer.piko.com/PikoDataServices/ServiceDataPiko/GetVideoSegmentListRes" +
            "ponse")]
        System.Threading.Tasks.Task<PikoTrafficManager.DataPikoClient.Segment[]> GetVideoSegmentListAsync(string IdVideo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://developer.piko.com/PikoDataServices/ServiceDataPiko/GetChannels", ReplyAction="http://developer.piko.com/PikoDataServices/ServiceDataPiko/GetChannelsResponse")]
        PikoTrafficManager.DataPikoClient.Channel[] GetChannels();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://developer.piko.com/PikoDataServices/ServiceDataPiko/GetChannels", ReplyAction="http://developer.piko.com/PikoDataServices/ServiceDataPiko/GetChannelsResponse")]
        System.Threading.Tasks.Task<PikoTrafficManager.DataPikoClient.Channel[]> GetChannelsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://developer.piko.com/PikoDataServices/ServiceDataPiko/GetDeviceList", ReplyAction="http://developer.piko.com/PikoDataServices/ServiceDataPiko/GetDeviceListResponse")]
        PikoTrafficManager.DataPikoClient.Devices[] GetDeviceList();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://developer.piko.com/PikoDataServices/ServiceDataPiko/GetDeviceList", ReplyAction="http://developer.piko.com/PikoDataServices/ServiceDataPiko/GetDeviceListResponse")]
        System.Threading.Tasks.Task<PikoTrafficManager.DataPikoClient.Devices[]> GetDeviceListAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://developer.piko.com/PikoDataServices/ServiceDataPiko/DeleteVideo", ReplyAction="http://developer.piko.com/PikoDataServices/ServiceDataPiko/DeleteVideoResponse")]
        bool DeleteVideo(string IdVideo, string Volume);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://developer.piko.com/PikoDataServices/ServiceDataPiko/DeleteVideo", ReplyAction="http://developer.piko.com/PikoDataServices/ServiceDataPiko/DeleteVideoResponse")]
        System.Threading.Tasks.Task<bool> DeleteVideoAsync(string IdVideo, string Volume);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://developer.piko.com/PikoDataServices/ServiceDataPiko/SaveVideo", ReplyAction="http://developer.piko.com/PikoDataServices/ServiceDataPiko/SaveVideoResponse")]
        bool SaveVideo(string IdVideo, PikoTrafficManager.DataPikoClient.SupportData Data);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://developer.piko.com/PikoDataServices/ServiceDataPiko/SaveVideo", ReplyAction="http://developer.piko.com/PikoDataServices/ServiceDataPiko/SaveVideoResponse")]
        System.Threading.Tasks.Task<bool> SaveVideoAsync(string IdVideo, PikoTrafficManager.DataPikoClient.SupportData Data);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://developer.piko.com/PikoDataServices/ServiceDataPiko/CreateVideo", ReplyAction="http://developer.piko.com/PikoDataServices/ServiceDataPiko/CreateVideoResponse")]
        PikoTrafficManager.DataPikoClient.SupportData CreateVideo(PikoTrafficManager.DataPikoClient.SupportData Data);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://developer.piko.com/PikoDataServices/ServiceDataPiko/CreateVideo", ReplyAction="http://developer.piko.com/PikoDataServices/ServiceDataPiko/CreateVideoResponse")]
        System.Threading.Tasks.Task<PikoTrafficManager.DataPikoClient.SupportData> CreateVideoAsync(PikoTrafficManager.DataPikoClient.SupportData Data);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://developer.piko.com/PikoDataServices/ServiceDataPiko/GetBlocks", ReplyAction="http://developer.piko.com/PikoDataServices/ServiceDataPiko/GetBlocksResponse")]
        PikoTrafficManager.DataPikoClient.PlaylistData[] GetBlocks();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://developer.piko.com/PikoDataServices/ServiceDataPiko/GetBlocks", ReplyAction="http://developer.piko.com/PikoDataServices/ServiceDataPiko/GetBlocksResponse")]
        System.Threading.Tasks.Task<PikoTrafficManager.DataPikoClient.PlaylistData[]> GetBlocksAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://developer.piko.com/PikoDataServices/ServiceDataPiko/SaveBlock", ReplyAction="http://developer.piko.com/PikoDataServices/ServiceDataPiko/SaveBlockResponse")]
        bool SaveBlock(PikoTrafficManager.DataPikoClient.PlaylistData Data);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://developer.piko.com/PikoDataServices/ServiceDataPiko/SaveBlock", ReplyAction="http://developer.piko.com/PikoDataServices/ServiceDataPiko/SaveBlockResponse")]
        System.Threading.Tasks.Task<bool> SaveBlockAsync(PikoTrafficManager.DataPikoClient.PlaylistData Data);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://developer.piko.com/PikoDataServices/ServiceDataPiko/ExportBlock", ReplyAction="http://developer.piko.com/PikoDataServices/ServiceDataPiko/ExportBlockResponse")]
        string ExportBlock(PikoTrafficManager.DataPikoClient.PlaylistData Data);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://developer.piko.com/PikoDataServices/ServiceDataPiko/ExportBlock", ReplyAction="http://developer.piko.com/PikoDataServices/ServiceDataPiko/ExportBlockResponse")]
        System.Threading.Tasks.Task<string> ExportBlockAsync(PikoTrafficManager.DataPikoClient.PlaylistData Data);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://developer.piko.com/PikoDataServices/ServiceDataPiko/LoadBlock", ReplyAction="http://developer.piko.com/PikoDataServices/ServiceDataPiko/LoadBlockResponse")]
        PikoTrafficManager.DataPikoClient.PlaylistData LoadBlock(string blockId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://developer.piko.com/PikoDataServices/ServiceDataPiko/LoadBlock", ReplyAction="http://developer.piko.com/PikoDataServices/ServiceDataPiko/LoadBlockResponse")]
        System.Threading.Tasks.Task<PikoTrafficManager.DataPikoClient.PlaylistData> LoadBlockAsync(string blockId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://developer.piko.com/PikoDataServices/ServiceDataPiko/DeleteBlock", ReplyAction="http://developer.piko.com/PikoDataServices/ServiceDataPiko/DeleteBlockResponse")]
        bool DeleteBlock(string blockId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://developer.piko.com/PikoDataServices/ServiceDataPiko/DeleteBlock", ReplyAction="http://developer.piko.com/PikoDataServices/ServiceDataPiko/DeleteBlockResponse")]
        System.Threading.Tasks.Task<bool> DeleteBlockAsync(string blockId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://developer.piko.com/PikoDataServices/ServiceDataPiko/GetPlaylists", ReplyAction="http://developer.piko.com/PikoDataServices/ServiceDataPiko/GetPlaylistsResponse")]
        PikoTrafficManager.DataPikoClient.PlaylistData[] GetPlaylists();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://developer.piko.com/PikoDataServices/ServiceDataPiko/GetPlaylists", ReplyAction="http://developer.piko.com/PikoDataServices/ServiceDataPiko/GetPlaylistsResponse")]
        System.Threading.Tasks.Task<PikoTrafficManager.DataPikoClient.PlaylistData[]> GetPlaylistsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://developer.piko.com/PikoDataServices/ServiceDataPiko/SavePlaylist", ReplyAction="http://developer.piko.com/PikoDataServices/ServiceDataPiko/SavePlaylistResponse")]
        bool SavePlaylist(PikoTrafficManager.DataPikoClient.PlaylistData Data);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://developer.piko.com/PikoDataServices/ServiceDataPiko/SavePlaylist", ReplyAction="http://developer.piko.com/PikoDataServices/ServiceDataPiko/SavePlaylistResponse")]
        System.Threading.Tasks.Task<bool> SavePlaylistAsync(PikoTrafficManager.DataPikoClient.PlaylistData Data);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://developer.piko.com/PikoDataServices/ServiceDataPiko/ExportPlaylist", ReplyAction="http://developer.piko.com/PikoDataServices/ServiceDataPiko/ExportPlaylistResponse" +
            "")]
        string ExportPlaylist(PikoTrafficManager.DataPikoClient.PlaylistData Data);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://developer.piko.com/PikoDataServices/ServiceDataPiko/ExportPlaylist", ReplyAction="http://developer.piko.com/PikoDataServices/ServiceDataPiko/ExportPlaylistResponse" +
            "")]
        System.Threading.Tasks.Task<string> ExportPlaylistAsync(PikoTrafficManager.DataPikoClient.PlaylistData Data);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://developer.piko.com/PikoDataServices/ServiceDataPiko/LoadPlaylist", ReplyAction="http://developer.piko.com/PikoDataServices/ServiceDataPiko/LoadPlaylistResponse")]
        PikoTrafficManager.DataPikoClient.PlaylistData LoadPlaylist(string playlistId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://developer.piko.com/PikoDataServices/ServiceDataPiko/LoadPlaylist", ReplyAction="http://developer.piko.com/PikoDataServices/ServiceDataPiko/LoadPlaylistResponse")]
        System.Threading.Tasks.Task<PikoTrafficManager.DataPikoClient.PlaylistData> LoadPlaylistAsync(string playlistId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://developer.piko.com/PikoDataServices/ServiceDataPiko/DeletePlaylist", ReplyAction="http://developer.piko.com/PikoDataServices/ServiceDataPiko/DeletePlaylistResponse" +
            "")]
        bool DeletePlaylist(string playlistId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://developer.piko.com/PikoDataServices/ServiceDataPiko/DeletePlaylist", ReplyAction="http://developer.piko.com/PikoDataServices/ServiceDataPiko/DeletePlaylistResponse" +
            "")]
        System.Threading.Tasks.Task<bool> DeletePlaylistAsync(string playlistId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://developer.piko.com/PikoDataServices/ServiceDataPiko/GetConfig", ReplyAction="http://developer.piko.com/PikoDataServices/ServiceDataPiko/GetConfigResponse")]
        PikoTrafficManager.DataPikoClient.Config GetConfig(string Version);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://developer.piko.com/PikoDataServices/ServiceDataPiko/GetConfig", ReplyAction="http://developer.piko.com/PikoDataServices/ServiceDataPiko/GetConfigResponse")]
        System.Threading.Tasks.Task<PikoTrafficManager.DataPikoClient.Config> GetConfigAsync(string Version);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://developer.piko.com/PikoDataServices/ServiceDataPiko/GetRemoteConfig", ReplyAction="http://developer.piko.com/PikoDataServices/ServiceDataPiko/GetRemoteConfigRespons" +
            "e")]
        string GetRemoteConfig();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://developer.piko.com/PikoDataServices/ServiceDataPiko/GetRemoteConfig", ReplyAction="http://developer.piko.com/PikoDataServices/ServiceDataPiko/GetRemoteConfigRespons" +
            "e")]
        System.Threading.Tasks.Task<string> GetRemoteConfigAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://developer.piko.com/PikoDataServices/ServiceDataPiko/CheckSystem", ReplyAction="http://developer.piko.com/PikoDataServices/ServiceDataPiko/CheckSystemResponse")]
        void CheckSystem();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://developer.piko.com/PikoDataServices/ServiceDataPiko/CheckSystem", ReplyAction="http://developer.piko.com/PikoDataServices/ServiceDataPiko/CheckSystemResponse")]
        System.Threading.Tasks.Task CheckSystemAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://developer.piko.com/PikoDataServices/ServiceDataPiko/GetVolumeData", ReplyAction="http://developer.piko.com/PikoDataServices/ServiceDataPiko/GetVolumeDataResponse")]
        PikoTrafficManager.DataPikoClient.VolumeData GetVolumeData(string VolumePath);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://developer.piko.com/PikoDataServices/ServiceDataPiko/GetVolumeData", ReplyAction="http://developer.piko.com/PikoDataServices/ServiceDataPiko/GetVolumeDataResponse")]
        System.Threading.Tasks.Task<PikoTrafficManager.DataPikoClient.VolumeData> GetVolumeDataAsync(string VolumePath);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://developer.piko.com/PikoDataServices/ServiceDataPiko/GetCategories", ReplyAction="http://developer.piko.com/PikoDataServices/ServiceDataPiko/GetCategoriesResponse")]
        PikoTrafficManager.DataPikoClient.Category[] GetCategories();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://developer.piko.com/PikoDataServices/ServiceDataPiko/GetCategories", ReplyAction="http://developer.piko.com/PikoDataServices/ServiceDataPiko/GetCategoriesResponse")]
        System.Threading.Tasks.Task<PikoTrafficManager.DataPikoClient.Category[]> GetCategoriesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://developer.piko.com/PikoDataServices/ServiceDataPiko/CreateCategory", ReplyAction="http://developer.piko.com/PikoDataServices/ServiceDataPiko/CreateCategoryResponse" +
            "")]
        int CreateCategory(PikoTrafficManager.DataPikoClient.Category categoryToCreate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://developer.piko.com/PikoDataServices/ServiceDataPiko/CreateCategory", ReplyAction="http://developer.piko.com/PikoDataServices/ServiceDataPiko/CreateCategoryResponse" +
            "")]
        System.Threading.Tasks.Task<int> CreateCategoryAsync(PikoTrafficManager.DataPikoClient.Category categoryToCreate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://developer.piko.com/PikoDataServices/ServiceDataPiko/DeleteCategory", ReplyAction="http://developer.piko.com/PikoDataServices/ServiceDataPiko/DeleteCategoryResponse" +
            "")]
        void DeleteCategory(long CategoryId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://developer.piko.com/PikoDataServices/ServiceDataPiko/DeleteCategory", ReplyAction="http://developer.piko.com/PikoDataServices/ServiceDataPiko/DeleteCategoryResponse" +
            "")]
        System.Threading.Tasks.Task DeleteCategoryAsync(long CategoryId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://developer.piko.com/PikoDataServices/ServiceDataPiko/AddTemplateField", ReplyAction="http://developer.piko.com/PikoDataServices/ServiceDataPiko/AddTemplateFieldRespon" +
            "se")]
        int AddTemplateField(PikoTrafficManager.DataPikoClient.TemplateFieldData FieldDefinition);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://developer.piko.com/PikoDataServices/ServiceDataPiko/AddTemplateField", ReplyAction="http://developer.piko.com/PikoDataServices/ServiceDataPiko/AddTemplateFieldRespon" +
            "se")]
        System.Threading.Tasks.Task<int> AddTemplateFieldAsync(PikoTrafficManager.DataPikoClient.TemplateFieldData FieldDefinition);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://developer.piko.com/PikoDataServices/ServiceDataPiko/AddTemplateFieldToCate" +
            "gory", ReplyAction="http://developer.piko.com/PikoDataServices/ServiceDataPiko/AddTemplateFieldToCate" +
            "goryResponse")]
        int AddTemplateFieldToCategory(int IdCategory, int IdTemplateField);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://developer.piko.com/PikoDataServices/ServiceDataPiko/AddTemplateFieldToCate" +
            "gory", ReplyAction="http://developer.piko.com/PikoDataServices/ServiceDataPiko/AddTemplateFieldToCate" +
            "goryResponse")]
        System.Threading.Tasks.Task<int> AddTemplateFieldToCategoryAsync(int IdCategory, int IdTemplateField);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ServiceDataPikoChannel : PikoTrafficManager.DataPikoClient.ServiceDataPiko, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServiceDataPikoClient : System.ServiceModel.ClientBase<PikoTrafficManager.DataPikoClient.ServiceDataPiko>, PikoTrafficManager.DataPikoClient.ServiceDataPiko {
        
        public ServiceDataPikoClient() {
        }
        
        public ServiceDataPikoClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ServiceDataPikoClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceDataPikoClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceDataPikoClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public PikoTrafficManager.DataPikoClient.SupportData GetVideoInfo(string IdVideo) {
            return base.Channel.GetVideoInfo(IdVideo);
        }
        
        public System.Threading.Tasks.Task<PikoTrafficManager.DataPikoClient.SupportData> GetVideoInfoAsync(string IdVideo) {
            return base.Channel.GetVideoInfoAsync(IdVideo);
        }
        
        public string GetMediaInfo(string VideoPath, PikoTrafficManager.DataPikoClient.MediaInfoScanType ScanType) {
            return base.Channel.GetMediaInfo(VideoPath, ScanType);
        }
        
        public System.Threading.Tasks.Task<string> GetMediaInfoAsync(string VideoPath, PikoTrafficManager.DataPikoClient.MediaInfoScanType ScanType) {
            return base.Channel.GetMediaInfoAsync(VideoPath, ScanType);
        }
        
        public PikoTrafficManager.DataPikoClient.Segment GetVideoSegmentInfo(string IdVideo, uint SegmentId) {
            return base.Channel.GetVideoSegmentInfo(IdVideo, SegmentId);
        }
        
        public System.Threading.Tasks.Task<PikoTrafficManager.DataPikoClient.Segment> GetVideoSegmentInfoAsync(string IdVideo, uint SegmentId) {
            return base.Channel.GetVideoSegmentInfoAsync(IdVideo, SegmentId);
        }
        
        public PikoTrafficManager.DataPikoClient.Segment[] GetVideoSegmentList(string IdVideo) {
            return base.Channel.GetVideoSegmentList(IdVideo);
        }
        
        public System.Threading.Tasks.Task<PikoTrafficManager.DataPikoClient.Segment[]> GetVideoSegmentListAsync(string IdVideo) {
            return base.Channel.GetVideoSegmentListAsync(IdVideo);
        }
        
        public PikoTrafficManager.DataPikoClient.Channel[] GetChannels() {
            return base.Channel.GetChannels();
        }
        
        public System.Threading.Tasks.Task<PikoTrafficManager.DataPikoClient.Channel[]> GetChannelsAsync() {
            return base.Channel.GetChannelsAsync();
        }
        
        public PikoTrafficManager.DataPikoClient.Devices[] GetDeviceList() {
            return base.Channel.GetDeviceList();
        }
        
        public System.Threading.Tasks.Task<PikoTrafficManager.DataPikoClient.Devices[]> GetDeviceListAsync() {
            return base.Channel.GetDeviceListAsync();
        }
        
        public bool DeleteVideo(string IdVideo, string Volume) {
            return base.Channel.DeleteVideo(IdVideo, Volume);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteVideoAsync(string IdVideo, string Volume) {
            return base.Channel.DeleteVideoAsync(IdVideo, Volume);
        }
        
        public bool SaveVideo(string IdVideo, PikoTrafficManager.DataPikoClient.SupportData Data) {
            return base.Channel.SaveVideo(IdVideo, Data);
        }
        
        public System.Threading.Tasks.Task<bool> SaveVideoAsync(string IdVideo, PikoTrafficManager.DataPikoClient.SupportData Data) {
            return base.Channel.SaveVideoAsync(IdVideo, Data);
        }
        
        public PikoTrafficManager.DataPikoClient.SupportData CreateVideo(PikoTrafficManager.DataPikoClient.SupportData Data) {
            return base.Channel.CreateVideo(Data);
        }
        
        public System.Threading.Tasks.Task<PikoTrafficManager.DataPikoClient.SupportData> CreateVideoAsync(PikoTrafficManager.DataPikoClient.SupportData Data) {
            return base.Channel.CreateVideoAsync(Data);
        }
        
        public PikoTrafficManager.DataPikoClient.PlaylistData[] GetBlocks() {
            return base.Channel.GetBlocks();
        }
        
        public System.Threading.Tasks.Task<PikoTrafficManager.DataPikoClient.PlaylistData[]> GetBlocksAsync() {
            return base.Channel.GetBlocksAsync();
        }
        
        public bool SaveBlock(PikoTrafficManager.DataPikoClient.PlaylistData Data) {
            return base.Channel.SaveBlock(Data);
        }
        
        public System.Threading.Tasks.Task<bool> SaveBlockAsync(PikoTrafficManager.DataPikoClient.PlaylistData Data) {
            return base.Channel.SaveBlockAsync(Data);
        }
        
        public string ExportBlock(PikoTrafficManager.DataPikoClient.PlaylistData Data) {
            return base.Channel.ExportBlock(Data);
        }
        
        public System.Threading.Tasks.Task<string> ExportBlockAsync(PikoTrafficManager.DataPikoClient.PlaylistData Data) {
            return base.Channel.ExportBlockAsync(Data);
        }
        
        public PikoTrafficManager.DataPikoClient.PlaylistData LoadBlock(string blockId) {
            return base.Channel.LoadBlock(blockId);
        }
        
        public System.Threading.Tasks.Task<PikoTrafficManager.DataPikoClient.PlaylistData> LoadBlockAsync(string blockId) {
            return base.Channel.LoadBlockAsync(blockId);
        }
        
        public bool DeleteBlock(string blockId) {
            return base.Channel.DeleteBlock(blockId);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteBlockAsync(string blockId) {
            return base.Channel.DeleteBlockAsync(blockId);
        }
        
        public PikoTrafficManager.DataPikoClient.PlaylistData[] GetPlaylists() {
            return base.Channel.GetPlaylists();
        }
        
        public System.Threading.Tasks.Task<PikoTrafficManager.DataPikoClient.PlaylistData[]> GetPlaylistsAsync() {
            return base.Channel.GetPlaylistsAsync();
        }
        
        public bool SavePlaylist(PikoTrafficManager.DataPikoClient.PlaylistData Data) {
            return base.Channel.SavePlaylist(Data);
        }
        
        public System.Threading.Tasks.Task<bool> SavePlaylistAsync(PikoTrafficManager.DataPikoClient.PlaylistData Data) {
            return base.Channel.SavePlaylistAsync(Data);
        }
        
        public string ExportPlaylist(PikoTrafficManager.DataPikoClient.PlaylistData Data) {
            return base.Channel.ExportPlaylist(Data);
        }
        
        public System.Threading.Tasks.Task<string> ExportPlaylistAsync(PikoTrafficManager.DataPikoClient.PlaylistData Data) {
            return base.Channel.ExportPlaylistAsync(Data);
        }
        
        public PikoTrafficManager.DataPikoClient.PlaylistData LoadPlaylist(string playlistId) {
            return base.Channel.LoadPlaylist(playlistId);
        }
        
        public System.Threading.Tasks.Task<PikoTrafficManager.DataPikoClient.PlaylistData> LoadPlaylistAsync(string playlistId) {
            return base.Channel.LoadPlaylistAsync(playlistId);
        }
        
        public bool DeletePlaylist(string playlistId) {
            return base.Channel.DeletePlaylist(playlistId);
        }
        
        public System.Threading.Tasks.Task<bool> DeletePlaylistAsync(string playlistId) {
            return base.Channel.DeletePlaylistAsync(playlistId);
        }
        
        public PikoTrafficManager.DataPikoClient.Config GetConfig(string Version) {
            return base.Channel.GetConfig(Version);
        }
        
        public System.Threading.Tasks.Task<PikoTrafficManager.DataPikoClient.Config> GetConfigAsync(string Version) {
            return base.Channel.GetConfigAsync(Version);
        }
        
        public string GetRemoteConfig() {
            return base.Channel.GetRemoteConfig();
        }
        
        public System.Threading.Tasks.Task<string> GetRemoteConfigAsync() {
            return base.Channel.GetRemoteConfigAsync();
        }
        
        public void CheckSystem() {
            base.Channel.CheckSystem();
        }
        
        public System.Threading.Tasks.Task CheckSystemAsync() {
            return base.Channel.CheckSystemAsync();
        }
        
        public PikoTrafficManager.DataPikoClient.VolumeData GetVolumeData(string VolumePath) {
            return base.Channel.GetVolumeData(VolumePath);
        }
        
        public System.Threading.Tasks.Task<PikoTrafficManager.DataPikoClient.VolumeData> GetVolumeDataAsync(string VolumePath) {
            return base.Channel.GetVolumeDataAsync(VolumePath);
        }
        
        public PikoTrafficManager.DataPikoClient.Category[] GetCategories() {
            return base.Channel.GetCategories();
        }
        
        public System.Threading.Tasks.Task<PikoTrafficManager.DataPikoClient.Category[]> GetCategoriesAsync() {
            return base.Channel.GetCategoriesAsync();
        }
        
        public int CreateCategory(PikoTrafficManager.DataPikoClient.Category categoryToCreate) {
            return base.Channel.CreateCategory(categoryToCreate);
        }
        
        public System.Threading.Tasks.Task<int> CreateCategoryAsync(PikoTrafficManager.DataPikoClient.Category categoryToCreate) {
            return base.Channel.CreateCategoryAsync(categoryToCreate);
        }
        
        public void DeleteCategory(long CategoryId) {
            base.Channel.DeleteCategory(CategoryId);
        }
        
        public System.Threading.Tasks.Task DeleteCategoryAsync(long CategoryId) {
            return base.Channel.DeleteCategoryAsync(CategoryId);
        }
        
        public int AddTemplateField(PikoTrafficManager.DataPikoClient.TemplateFieldData FieldDefinition) {
            return base.Channel.AddTemplateField(FieldDefinition);
        }
        
        public System.Threading.Tasks.Task<int> AddTemplateFieldAsync(PikoTrafficManager.DataPikoClient.TemplateFieldData FieldDefinition) {
            return base.Channel.AddTemplateFieldAsync(FieldDefinition);
        }
        
        public int AddTemplateFieldToCategory(int IdCategory, int IdTemplateField) {
            return base.Channel.AddTemplateFieldToCategory(IdCategory, IdTemplateField);
        }
        
        public System.Threading.Tasks.Task<int> AddTemplateFieldToCategoryAsync(int IdCategory, int IdTemplateField) {
            return base.Channel.AddTemplateFieldToCategoryAsync(IdCategory, IdTemplateField);
        }
    }
}
